version: '3.9'

networks:
  default:
    name: media-server-network

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: always
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - CLOUDFLARE_ZONE_API_TOKEN=${CLOUDFLARE_ZONE_API_TOKEN}
      - CLOUDFLARE_POLLING_INTERVAL=${CLOUDFLARE_POLLING_INTERVAL}
      - CLOUDFLARE_PROPAGATION_TIMEOUT=${CLOUDFLARE_PROPAGATION_TIMEOUT}
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL}
    command:
      # - --log.level=DEBUG
      # - --log.filePath=/letsencrypt/traefik.log
      - --api.insecure=true
      - --api.dashboard=true
      - --ping=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web-secure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=web-secure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --experimental.plugins.rewrite-body.modulename=github.com/packruler/rewrite-body
      - --experimental.plugins.rewrite-body.version=v1.2.0
      - --experimental.plugins.rewriteHeaders.modulename=github.com/XciD/traefik-plugin-rewrite-headers
      - --experimental.plugins.rewriteHeaders.version=v0.0.3
      - --certificatesresolvers.myresolver.acme.dnschallenge=${DNS_CHALLENGE:-true}
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${DNS_CHALLENGE_PROVIDER:-cloudflare}
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1
      - --certificatesresolvers.myresolver.acme.caserver=${LETS_ENCRYPT_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      - --certificatesresolvers.myresolver.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 5s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${HOSTNAME}`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=myresolver
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - homepage.group=Network
      - homepage.name=Traefik
      - homepage.icon=traefik.png
      - homepage.href=https://traefik.${HOSTNAME}
      - homepage.description=Reverse Proxy and Ingress Controller
      - homepage.weight=1
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:8080

  vpn:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    volumes:
      - ./wireguard:/config
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
    volumes:
      - ./homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_ROOT}:/data
    restart: always
    command: [sh, -c, "cp /app/config/tpl/*.yaml /app/config && node server.js"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=Host(`media.${HOSTNAME}`)
      - traefik.http.routers.homepage.tls=true
      - traefik.http.routers.homepage.tls.certresolver=myresolver
      - traefik.http.services.homepage.loadbalancer.server.port=3000

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ./plex:/config
      - ${DATA_ROOT}/media/movies:/movies
      - ${DATA_ROOT}/media/tv:/tv
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.${HOSTNAME}`)
      - traefik.http.routers.plex.tls=true
      - traefik.http.routers.plex.tls.certresolver=myresolver
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - homepage.group=Media
      - homepage.name=Plex
      - homepage.icon=plex.png
      - homepage.href=https://plex.${HOSTNAME}
      - homepage.description=Media server
      - homepage.weight=1
      - homepage.widget.type=plex
      - homepage.widget.url=http://plex:32400
      - homepage.widget.fields=["streams", "movies", "tv"]
      - homepage.widget.key=${PLEX_API_KEY}
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./tautulli:/config
      - ./plex/Library/Application Support/Plex Media Server/Logs:/plexlogs
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.tautulli.rule=Host(`tautulli.${HOSTNAME}`)
      - traefik.http.routers.tautulli.tls=true
      - traefik.http.routers.tautulli.tls.certresolver=myresolver
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      - homepage.group=Media
      - homepage.name=Tautulli
      - homepage.icon=tautulli.png
      - homepage.href=https://tautulli.${HOSTNAME}
      - homepage.description=Plex monitoring
      - homepage.weight=2
      - homepage.widget.type=tautulli
      - homepage.widget.url=http://tautulli:8181
      - homepage.widget.key=${TAUTULLI_API_KEY}

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./overseerr:/config
    restart: always
    healthcheck:
      test: ["CMD", "wget", "http://127.0.0.1:5055/api/v1/status", "-qO", "/dev/null"]
      interval: 5s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`overseerr.${HOSTNAME}`)
      - traefik.http.routers.overseerr.tls=true
      - traefik.http.routers.overseerr.tls.certresolver=myresolver
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - homepage.group=Media
      - homepage.name=Overseerr
      - homepage.icon=overseerr.png
      - homepage.href=https://overseerr.${HOSTNAME}
      - homepage.description=Content Recommendations and Request Management
      - homepage.weight=2
      - homepage.widget.type=overseerr
      - homepage.widget.url=http://overseerr:5055
      - homepage.widget.key=${OVERSEERR_API_KEY}

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - DOCKER_MODS=arafatamim/linuxserver-io-mod-vuetorrent
    volumes:
      - ./qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8080", "https://google.com" ]
      interval: 5s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${HOSTNAME}`)
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
      - traefik.http.routers.qbittorrent.middlewares=qbittorrent-strip-slash,qbittorrent-stripprefix
      # https://github.com/qbittorrent/qBittorrent/issues/5693#issuecomment-552146296
      - traefik.http.middlewares.qbittorrent-stripprefix.stripPrefix.prefixes=/qbittorrent
      # https://community.traefik.io/t/middleware-to-add-the-if-needed/1895/19
      - traefik.http.middlewares.qbittorrent-strip-slash.redirectregex.regex=(^.*\/qbittorrent$$)
      - traefik.http.middlewares.qbittorrent-strip-slash.redirectregex.replacement=$$1/
      - traefik.http.middlewares.qbittorrent-strip-slash.redirectregex.permanent=false
      - homepage.group=Download
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=https://qbittorrent.${HOSTNAME}
      - homepage.description=Bittorrent client
      - homepage.weight=1
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://vpn:8080
      - homepage.widget.username=${QBITTORRENT_USERNAME}
      - homepage.widget.password=${QBITTORRENT_PASSWORD}

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/ping", "https://google.com" ]
      interval: 5s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${HOSTNAME}`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=Download
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=https://sonarr.${HOSTNAME}
      - homepage.description=Series management
      - homepage.weight=3
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://vpn:8989
      - homepage.widget.key=${SONARR_API_KEY}

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:7878/ping", "https://google.com" ]
      interval: 5s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${HOSTNAME}`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=myresolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=Download
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=https://radarr.${HOSTNAME}
      - homepage.description=Movies management
      - homepage.weight=4
      - homepage.widget.type=radarr
      - homepage.widget.url=http://vpn:7878
      - homepage.widget.key=${RADARR_API_KEY}

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr:/config
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:9696/ping", "https://google.com" ]
      interval: 5s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${HOSTNAME}`)
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=Download
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=https://prowlarr.${HOSTNAME}
      - homepage.description=Indexers management
      - homepage.weight=2
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://vpn:9696
      - homepage.widget.key=${PROWLARR_API_KEY}

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - LOG_LEVEL=debug  # Optional: Set the log level (info, debug, etc.)
      - LOG_HTML=false  # Optional: Set to true to log HTML responses (for debugging)
      - CAPTCHA_SOLVER=none  # Optional: Integrate with a CAPTCHA solving service

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./bazarr:/config
      - ${DATA_ROOT}/media/movies:/movies
      - ${DATA_ROOT}/media/tv:/tv
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:6767/ping", "https://google.com" ]
      interval: 5s
      retries: 10
    network_mode: "service:vpn"
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`bazarr.${HOSTNAME}`)
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.tls.certresolver=myresolver
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - homepage.group=Download
      - homepage.name=Bazarr
      - homepage.icon=bazarr.png
      - homepage.href=https://bazarr.${HOSTNAME}
      - homepage.description=Subtitles management
      - homepage.weight=2
      - homepage.widget.type=bazarr
      - homepage.widget.url=http://vpn:6767
      - homepage.widget.key=${BAZARR_API_KEY}

  filebrowser:
    image: hurlenko/filebrowser
    container_name: filebrowser
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
    volumes:
      - ${DATA_ROOT}:/data
      - ./filebrowser:/config
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.filebrowser.rule=Host(`filebrowser.${HOSTNAME}`)
      - traefik.http.routers.filebrowser.tls=true
      - traefik.http.routers.filebrowser.tls.certresolver=myresolver
      - traefik.http.services.filebrowser.loadbalancer.server.port=8080
      - homepage.group=System
      - homepage.name=Filebrowser
      - homepage.icon=filebrowser.png
      - homepage.href=https://filebrowser.${HOSTNAME}
      - homepage.description=File browser
      - homepage.weight=3

  librespeed:
    image: lscr.io/linuxserver/librespeed:latest
    container_name: librespeed
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - PASSWORD=${LIBRESPEED_PWD}
    volumes:
      - ./librespeed/config:/config
    ports:
      - 8089:80
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.librespeed.rule=Host(`librespeed.${HOSTNAME}`)
      - traefik.http.routers.librespeed.tls=true
      - traefik.http.routers.librespeed.tls.certresolver=myresolver
      - traefik.http.services.librespeed.loadbalancer.server.port=80
      - homepage.group=System
      - homepage.name=Librespeed
      - homepage.icon=librespeed.png
      - homepage.href=https://librespeed.${HOSTNAME}
      - homepage.description=Network Speed Test
      - homepage.weight=2

  romm:
    image: rommapp/romm:latest
    container_name: romm
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
      - DB_HOST=romm-db
      - DB_NAME=romm # Should match MYSQL_DATABASE in mariadb
      - DB_USER=romm-user # Should match MYSQL_USER in mariadb
      - DB_PASSWD=${ROMM_DB_PASSWD} # Should match MYSQL_PASSWORD in mariadb
      - ROMM_AUTH_SECRET_KEY=${ROMM_AUTH_SECRET_KEY} # Generate a key with `openssl rand -hex 32`
      - ROMM_AUTH_USERNAME=${ROMM_AUTH_USERNAME}
      - ROMM_AUTH_PASSWORD=${ROMM_AUTH_PASSWORD}
      # - IGDB_CLIENT_ID= # Generate an ID and SECRET in IGDB
      # - IGDB_CLIENT_SECRET= # https://api-docs.igdb.com/#account-creation
      - MOBYGAMES_API_KEY=${MOBYGAMES_API_KEY} # https://www.mobygames.com/info/api/
      - STEAMGRIDDB_API_KEY=${STEAMGRIDDB_API_KEY} # https://github.com/rommapp/romm/wiki/Generate-API-Keys#steamgriddb
    volumes:
      - ./romm/resources:/romm/resources # Resources fetched from IGDB (covers, screenshots, etc.)
      - ./romm/redis:/redis-data # Cached data for background tasks
      - ${DATA_ROOT}/emulation:/romm/library # Your game library (inc. bios/ and roms/ folders)
      - ./romm/assets:/romm/assets # Uploaded saves, states, etc.
      - ./romm/config:/romm/config # Path where config.yml is stored
    depends_on:
      - romm-db
    labels:
      - traefik.enable=true
      - traefik.http.routers.romm.rule=Host(`romm.${HOSTNAME}`)
      - traefik.http.routers.romm.tls=true
      - traefik.http.routers.romm.tls.certresolver=myresolver
      - traefik.http.services.romm.loadbalancer.server.port=8080
      - homepage.group=System
      - homepage.name=Romm
      - homepage.icon=romm.png
      - homepage.href=https://romm.${HOSTNAME}
      - homepage.description=Roms Library
      - homepage.weight=2

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    command:
      - serve
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - NTFY_BASE_URL=http://ntfy.example.com
      - NTFY_CACHE_FILE=/var/lib/ntfy/cache.db
      - NTFY_AUTH_FILE=/var/lib/ntfy/auth.db
      - NTFY_AUTH_DEFAULT_ACCESS=deny-all
      - NTFY_BEHIND_PROXY=true
      - NTFY_ATTACHMENT_CACHE_DIR=/var/lib/ntfy/attachments
      - NTFY_ENABLE_LOGIN=true
    volumes:
      # - ./ntfy/etc:/etc/ntfy
      - ./ntfy/lib:/var/lib/ntfy
    healthcheck: # optional: remember to adapt the host:port to your environment
        test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
        interval: 60s
        timeout: 10s
        retries: 3
        start_period: 40s
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.ntfy.rule=Host(`ntfy.${HOSTNAME}`)
      - traefik.http.routers.ntfy.tls=true
      - traefik.http.routers.ntfy.tls.certresolver=myresolver
      - traefik.http.services.ntfy.loadbalancer.server.port=80
      - homepage.group=System
      - homepage.name=ntfy
      - homepage.icon=ntfy.png
      - homepage.href=https://ntfy.${HOSTNAME}
      - homepage.description=Push Notification Service
      - homepage.weight=3

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # autoheal:
  #   image: willfarrell/autoheal:latest
  #   container_name: autoheal
  #   restart: always
  #   environment:
  #     - AUTOHEAL_CONTAINER_LABEL=all
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
